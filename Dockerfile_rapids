FROM nvcr.io/nvidia/rapidsai/rapidsai-core:22.12-cuda11.2-runtime-ubuntu20.04-py3.9


#################################################################################################################
#           Global
#################################################################################################################
# apt-get to skip any interactive post-install configuration steps with DEBIAN_FRONTEND=noninteractive and apt-get install -y
# add base bashrc file
ARG DEBIAN_FRONTEND=noninteractive
ENV DEBIAN_FRONTEND noninteractive
ENV LANG en_US.UTF-8
ENV LC_ALL=C.UTF-8


#################################################################################################################
#           Global Path Setting
#################################################################################################################

ENV CUDA_HOME /usr/local/cuda
ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${CUDA_HOME}/lib64
ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:/usr/local/lib

ENV OPENCL_LIBRARIES /usr/local/cuda/lib64
ENV OPENCL_INCLUDE_DIR /usr/local/cuda/include

#################################################################################################################
#           SYSTEM
#################################################################################################################
# update: downloads the package lists from the repositories and "updates" them to get information on the newest versions of packages and their
# dependencies. It will do this for all repositories and PPAs.

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    bzip2 \
    ca-certificates \
    cmake \
    curl \
    g++ \
    gcc \
    git \
    libboost-dev \
    libboost-filesystem-dev \
    libboost-system-dev \
    libglib2.0-0 \
    libnuma-dev \
    libsm6 \
    libssl-dev \
    libxext6 \
    libxrender1 \
    mercurial \
    nano \
    ocl-icd-libopencl1 \
    ocl-icd-opencl-dev \
    opencl-headers \
    subversion \
    wget


# Add OpenCL ICD files for LightGBM
RUN mkdir -p /etc/OpenCL/vendors && \
    echo "libnvidia-opencl.so.1" > /etc/OpenCL/vendors/nvidia.icd


#################################################################################################################
#           mamba install
#################################################################################################################

ENV MAMBA_ROOT_PREFIX=/opt/conda/bin/

#################################################################################################################
#           install / update base environment
#################################################################################################################
RUN /opt/conda/bin/conda config --set always_yes yes && \
    ${MAMBA_ROOT_PREFIX}/mamba install -qy -n base -c conda-forge \
    black ipykernel ipython jupyter jupyter_contrib_nbextensions \
    jupyter_nbextensions_configurator jupyterlab jupytext matplotlib nb_conda_kernels \
    nb_conda notebook scikit-learn tensorboard

#################################################################################################################
#           create environment
#################################################################################################################
ENV CONDA_DEFAULT_ENV=mlx
ARG CONDA_DEFAULT_ENV=mlx
COPY environment.yml /app/environment.yml
RUN /opt/conda/bin/mamba env create -f /app/environment.yml \
    # Make RUN commands use the new environment:
    && echo -e '#! /bin/bash\n\n/opt/conda/bin/conda activate "${CONDA_DEFAULT_ENV:-base}"' > ~/.bashrc
RUN python -m ipykernel install --user --name mlx --display-name env-mlx

#################################################################################################################
#           LightGBM
#################################################################################################################
SHELL ["/opt/conda/bin/mamba", "run", "-n", "mlx", "/bin/bash", "-c"]
# RUN cd /usr/local/src && mkdir lightgbm && cd lightgbm && \
#     git clone --recursive --branch stable --depth 1 https://github.com/microsoft/LightGBM && \
#     cd LightGBM && mkdir build && cd build && \
#     cmake -DUSE_GPU=1 -DOpenCL_LIBRARY=/usr/local/cuda/lib64/libOpenCL.so -DOpenCL_INCLUDE_DIR=/usr/local/cuda/include/ .. && \
#     make OPENCL_HEADERS=/usr/local/cuda-11.2/targets/x86_64-linux/include LIBOPENCL=/usr/local/cuda-11.2/targets/x86_64-linux/lib

# ENV PATH /usr/local/src/lightgbm/LightGBM:${PATH}

# RUN /bin/bash -c "/opt/conda/bin/mamba activate ml-env && cd /usr/local/src/lightgbm/LightGBM/python-package && python setup.py install --precompile --cuda && /opt/conda/bin/mamba deactivate"
# RUN /bin/bash -c "cd /usr/local/src/lightgbm/LightGBM/python-package && python setup.py install --precompile --cuda"
# RUN pip uninstall lightgbm
# RUN pip install lightgbm --install-option=--gpu --install-option="/usr/local/cuda-11.5/include/" --install-option="/usr/local/cuda-11.5/lib64/libOpenCL.so"
RUN pip install lightgbm --install-option=--cuda


#################################################################################################################
#           System CleanUp
#################################################################################################################
# apt-get autoremove: used to remove packages that were automatically installed to satisfy dependencies for some package and that are no more needed.
# apt-get clean: removes the aptitude cache in /var/cache/apt/archives. You'd be amazed how much is in there! the only drawback is that the packages
# have to be downloaded again if you reinstall them.

RUN apt-get autoremove -y && apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    /opt/conda/bin/conda clean -afy

#################################################################################################################
#           JUPYTER
#################################################################################################################

# password: keras
# password key: --NotebookApp.password='sha1:98b767162d34:8da1bc3c75a0f29145769edc977375a373407824'

# Add a notebook profile.
# RUN mkdir -p -m 700 ~/.jupyter/ && \
#     echo "--ServerApp.ip=0.0.0.0 --ServerApp.port=8888 --no-browser --notebook-dir="/app/" --ServerApp.token='abcdefg1234567890' --ServerApp.password='abcdefg1234567890'"  >> ~/.jupyter/jupyter_notebook_config.py

# IPython/Jupyter listens ports:
EXPOSE 8888
EXPOSE 8787
EXPOSE 8686
# MLFlow listening port:
EXPOSE 5000

# Make RUN commands use the new environment:
SHELL ["/opt/conda/bin/mamba", "run", "-n", "mlx", "/bin/bash", "-c"]

# Activate Conda environment and check if it is working properly
RUN echo "Making sure pycaret is installed correctly..."
RUN python -c "import pycaret" && \
    python -c "import lightgbm"

WORKDIR /app
COPY bashrc /root/.bashrc
RUN mkdir /root/utils
# COPY jupyter_notebook_config.py /root/.jupyter/jupyter_notebook_config.py
COPY jupyter_jupyterlab_server_config.py /root/.jupyter/jupyter_jupyterlab_server_config.py
COPY setup_environment.sh /root/utils/setup_environment.sh
COPY start-jupyter.sh /root/utils/start-jupyter.sh
COPY stop-jupyter.sh /root/utils/stop-jupyter.sh
COPY conda_entry.sh /root/utils/conda_entry.sh
RUN chmod +x /root/utils/*.sh
ENTRYPOINT ["/root/utils/conda_entry.sh"]